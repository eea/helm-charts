

image:
  repository: eeacms/eea-website-backend
  pullPolicy: Always
  tag: ""

imagePullSecrets: []

nameOverride: ""
fullnameOverride: ""

serviceAccount:
  create: false
  annotations: {}
  name: ""

timezone: Europe/Copenhagen

links:
  database: postgres-postgres.database
  memcached: postgres-memcached.database

ingress:
  annotations:
    cert-manager.io/cluster-issuer: 01dev-eea-letsencrypt
    nginx.ingress.kubernetes.io/proxy-body-size: 100m
    nginx.ingress.kubernetes.io/proxy-read-timeout: '480'
    nginx.ingress.kubernetes.io/proxy-send-timeout: '120'

  certificate: demo-www.01dev.eea.europa.eu-tls
  tls: true

plone:
  serviceType: ClusterIP
  hostname: demo-www.01dev.eea.europa.eu
  autoscaling:
    enabled: false
    minReplicas: 1
    maxReplicas: 9
    targetMemoryUtilizationPercentage: 60
  replicaCount: 1
  resources:
    limits:
      memory: 2Gi
    requests:
      memory: 1Gi
  database:
    POSTGRES_DB: eea
    POSTGRES_USER: zope
    POSTGRES_PASSWORD: zope
  environment:
    GRAYLOG: 'logcentral.eea.europa.eu:12201'
    SENTRY_DSN: ''
    SENTRY_ENVIRONMENT: '01dev'
    CORS_ALLOW_ORIGIN: ''
    DEFAULT_PUBLISHER: ''
    DEFAULT_ORGANISATIONS: ''
    PLONE_REGISTRY_YAML_CONTENT: ''
  annotations: {}
  livenessProbe:
    httpGet:
      path: /ok
      port: http
    periodSeconds: 20
    timeoutSeconds: 10
    initialDelaySeconds: 30
    failureThreshold: 6
    successThreshold: 1
  startupProbe:
    httpGet:
      path: /ok
      port: http
    periodSeconds: 5
    timeoutSeconds: 10
    initialDelaySeconds: 10
    failureThreshold: 12
    successThreshold: 1
  readinessProbe:
    httpGet:
      path: /ok
      port: http
    periodSeconds: 15
    timeoutSeconds: 10
    initialDelaySeconds: 60
    failureThreshold: 4
    successThreshold: 2
  site: www

varnish:
  serviceType: ClusterIP
  serviceName: backend-varnish
  backend: "backend-plone"
  port: 8080
  resources:
    limits:
      memory: 3Gi
    requests:
      memory: 2Gi
  nodeSelector: {}
  tolerations: []
  affinity: {}
  environment:
    VARNISH_SIZE: 2G
    VARNISH_DNS_TTL: '20s'
    VARNISH_BERESP_TTL: '60s'
    VARNISH_BERESP_GRACE: '120s'
    VARNISH_BERESP_KEEP: '120s'
    VARNISH_GZIP_ENABLED: 'true'
    VARNISH_GZIP_JSON_ENABLED: 'true'
    AUTOKILL_CRON: ''
  livenessProbe:
    httpGet:
      path: /ok
      port: http
    periodSeconds: 10
    timeoutSeconds: 10
    initialDelaySeconds: 30
    failureThreshold: 5
    successThreshold: 1
  startupProbe:
    httpGet:
      path: /ok
      port: http
    periodSeconds: 5
    timeoutSeconds: 10
    initialDelaySeconds: 10
    failureThreshold: 12
    successThreshold: 1


debug:
  serviceType: ClusterIP
  enabled: true
  resources:
    limits:
      memory: 4Gi
    requests:
      memory: 1Gi
  nodeSelector: {}
  tolerations: []
  affinity: {}
  podAnnotations: {}
  podSecurityContext: {}
  securityContext: {}
  environment: {}


postfix:
  fullnameOverride: ''
  dryrun: true
  serverName: demo-www.01dev.eea.europa.eu
  mtpPass: ''
  mtpPort: ''
  mtpRelay: ''
  mtpUser: ''
  serviceName: 'postfix'
  mailtrap:
    httpenabled: true
    serviceType: ClusterIP
    ingress:
      enabled: true
      hostname: mailtrap-demo-www.01dev.eea.europa.eu
      annotations:
        cert-manager.io/cluster-issuer: 01dev-eea-letsencrypt
      certificate: mailtrap-demo-www.01dev.eea.europa.eu-tls

# Cron jobs configuration
cronjobs:
  zodbpack:
    enabled: true
    schedule: "0 1 * * 0"
    image: eeacms/eea-website-backend:6.0.15-23
    command: ["/app/bin/zodbpack", "/app/etc/zodbpack.conf"]
    resources:
      limits:
        memory: 2Gi
      requests:
        memory: 1Gi
  entrasync:
    enabled: true
    schedule: "0 0 * * *"
    image: eeacms/eea-website-backend:6.0.15-23
    command: ["/app/bin/sync_eea_entra", "--portal", "www", "--zope-conf", "/app/etc/relstorage.conf"]
    resources:
      limits:
        memory: 2Gi
      requests:
        memory: 1Gi

# Memcached configuration (external dependency)
memcached:
  external: true
  host: memcached
  port: 11211



nginx:
  conf: |-
    map $request_uri $rewritten_uri {
      # Handle ++api++
      ~^/(\+\+api\+\+)(.*)$ /VirtualHostBase/https/$host:443/www/$1/VirtualHostRoot$2;

      # Handle /admin
      ~^/admin(.*)$ /VirtualHostBase/https/$host:443/www/VirtualHostRoot/_vh_admin$1;

      # Default: no rewrite
      default $request_uri;
    }

    server {
      listen 80;
      server_name _;

      location / {
        proxy_set_header Host $host;
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header X-Forwarded-Proto $scheme;
        proxy_redirect http:// https://;
        proxy_pass http://varnish_backend$rewritten_uri;
      }
    }
