apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: {{ .Release.Name }}-sonarqube-ss
  labels:
    {{- include "appl.labels" . | nindent 4 }}
    component: sonarqube
spec:
  replicas: 1
  serviceName: {{ .Release.Name }}-sonarqube
  selector:
    matchLabels:
      {{- include "appl.selectorLabels" . | nindent 6 }}
      component: sonarqube
  template:
    metadata:
      labels:
        {{- include "appl.selectorLabels" . | nindent 8 }}
        component: sonarqube
    spec:
      terminationGracePeriodSeconds: 10
      {{- with .Values.imagePullSecrets }}
      imagePullSecrets:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      serviceAccountName: {{ include "appl.serviceAccountName" . }}
      containers:
      - name: {{ .Release.Name }}
        image: "{{ .Values.image.repository }}:{{ .Values.image.tag | default .Chart.AppVersion }}"
        args:
          - -Dsonar.jdbc.username={{.Values.postgres.environment.POSTGRES_DBUSER}}
          - -Dsonar.jdbc.password={{.Values.postgres.environment.POSTGRES_DBPASS}}
          - -Dsonar.jdbc.url=jdbc:postgresql://postgres/{{.Values.postgres.environment.POSTGRES_DBNAME}}
          {{- range $key, $value := .Values.sonarqube.commandArgs }}
          {{- if ($value) }}
          - -Dsonar.{{ $key }}={{ $value | quote }}
          {{- end }}
          {{- end }}

        ports:
        - containerPort: 9000
          protocol: TCP
        env:
        - name: TZ
          value: "{{ .Values.timezone }}"
        securityContext:
          {{- toYaml .Values.securityContext | nindent 10 }}
        volumeMounts:
        - name: sonarqube-data
          mountPath: /opt/sonarqube/data
        - name: sonarqube-extensions
          mountPath: /opt/sonarqube/extensions
        - name: sonarqube-logs
          mountPath: /opt/sonarqube/logs
        resources:
          {{- toYaml .Values.sonarqube.resources | nindent 10 }}
        securityContext:
          {{- toYaml .Values.sonarqube.securityContext | nindent 12 }}

        {{- if (.Values.sonarqube.livenessProbe) }}
        livenessProbe:
          {{- toYaml .Values.sonarqube.livenessProbe | nindent 10 }}
        {{- end }}

        {{- if (.Values.sonarqube.startupProbe) }}
        startupProbe:
          {{- toYaml .Values.sonarqube.startupProbe | nindent 10 }}
        {{- end }}

        {{- if (.Values.sonarqube.readinessProbe) }}
        readinessProbe:
          {{- toYaml .Values.sonarqube.readinessProbe | nindent 10 }}
        {{- end }}
      initContainers:
        - name: es-sysctl
          image: busybox
          securityContext:
            privileged: true
            runAsUser: 0
          command: ["sysctl", "-w", "vm.max_map_count=262144"]
      {{- with .Values.sonarqube.nodeSelector }}
      nodeSelector:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      {{- with .Values.sonarqube.affinity }}
      affinity:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      {{- with .Values.sonarqube.tolerations }}
      tolerations:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      restartPolicy: Always
  volumeClaimTemplates:
    - metadata:
        name: sonarqube-data
      spec:
        accessModes:
          - ReadWriteOnce
        {{- if .Values.storageClassName }}
        storageClass: "{{ .Values.storage.className }}"
        {{- end }}
        resources:
          requests:
            storage: "{{ .Values.storage.dataSize }}"
    - metadata:
        name: sonarqube-extensions
      spec:
        accessModes:
          - ReadWriteOnce
        {{- if .Values.storageClassName }}
        storageClass: "{{ .Values.storage.className }}"
        {{- end }}
        resources:
          requests:
            storage: "{{ .Values.storage.extensionsSize }}"
    - metadata:
        name: sonarqube-logs
      spec:
        accessModes:
          - ReadWriteOnce
        {{- if .Values.storageClassName }}
        storageClass: "{{ .Values.storage.className }}"
        {{- end }}
        resources:
          requests:
            storage: "{{ .Values.storage.logsSize }}"
